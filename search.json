[
  {
    "objectID": "posts/renv_install_packages/index.html",
    "href": "posts/renv_install_packages/index.html",
    "title": "Installing packages for ‘renv’",
    "section": "",
    "text": "renv is a R package that allows to create environments, where the user can install and manage packages. This is needed when using a GitHub action.\nTo use renv it is necessary to install R packages again, even though they are already installed locally. This enables to use GitHub actions to automatically render the Quarto-Project to deploy a GitHub page!\nPackages can be installed normally with install.packages('tidyverse'). Afterwards you can check the status of renv with renv::status(). You can also install all necessary packages (e.g. knitr, markdown,…) by renv::install(). If you installed new packages you have to run renv::snapshot(), to add the installed packages to the lockfile.\nThis is just a simple example to show, that the installation of the package worked and GitHub action runs:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nx &lt;- seq(1,100,1)\ny &lt;- cos(x)\n\ndf &lt;- tibble(x, y) |&gt;\n  mutate(z = sin(x))\n\nhead(df)\n\n# A tibble: 6 × 3\n      x      y      z\n  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1     1  0.540  0.841\n2     2 -0.416  0.909\n3     3 -0.990  0.141\n4     4 -0.654 -0.757\n5     5  0.284 -0.959\n6     6  0.960 -0.279\n\n\n\nggplot(df) +\n  geom_line(\n    mapping = aes(x = x, y = y), linetype = 'dashed' \n  ) +\n  geom_line(\n    mapping = aes(x = x, y = z)\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "bReaus",
    "section": "",
    "text": "Developing packages in RStudio\n\n\n\n\n\n\ncode\n\n\nr\n\n\npackages\n\n\nrstudio\n\n\n\n\n\n\n\n\n\nJun 18, 2024\n\n\nLeo\n\n\n\n\n\n\n\n\n\n\n\n\nInstalling packages for ‘renv’\n\n\n\n\n\n\ncode\n\n\nr\n\n\nquarto\n\n\ngithub\n\n\n\n\n\n\n\n\n\nJun 12, 2024\n\n\nRuben\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/package_development_rstudio/index.html",
    "href": "posts/package_development_rstudio/index.html",
    "title": "Developing packages in RStudio",
    "section": "",
    "text": "Why to write a package? Packages provide an easy way to share code with others or use it later, saving time by organizing the code and projects in standardized way.\nPhilosophy: anything that can be automated, should be automated.\nPrerequisites: install.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"knitr\"))"
  },
  {
    "objectID": "posts/package_development_rstudio/index.html#intro",
    "href": "posts/package_development_rstudio/index.html#intro",
    "title": "Developing packages in RStudio",
    "section": "",
    "text": "Why to write a package? Packages provide an easy way to share code with others or use it later, saving time by organizing the code and projects in standardized way.\nPhilosophy: anything that can be automated, should be automated.\nPrerequisites: install.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"knitr\"))"
  },
  {
    "objectID": "posts/package_development_rstudio/index.html#basic-workflow",
    "href": "posts/package_development_rstudio/index.html#basic-workflow",
    "title": "Developing packages in RStudio",
    "section": "Basic workflow",
    "text": "Basic workflow\n\ncreate package either via devtools::create(path) or via RStudio–&gt;new Project–&gt;new R package\nin case git should be used: devtools::use_git()\nediting functions:\n\nusethis::use_r(\"functionname\") to create a new function script, naming the file after the function. New .R-files for each user-facing function in the package. After adding more functions, these might be grouped.\ncreate roxygen2-skeleton to provide information and document functions via 'Ctrl + Alt + Shift + R'\ndevtools::load_all() to load the created functions under R/ subdirectory\nusethis::use_package() to include functions from other packages (adding them to the Imports field of DESCRIPTION). The function can be used via packagename::fun()\n(git-commit after editing a function)\ndevtools::rename_files(\"old_name\", \"new_name\") to update the function name in files –&gt; Don’t forget to update test-files, too!\n\ncheck that an R package is in full working order with devtools::check() or 'Ctrl + Shift + E', providing a convenient way to run this without leaving the R session\ncreate testing infrastructure via usethis::use_testthat()\n\nusethis::use_test(\"function_name\") to create a test-file for a specific function\ndevtools::test() or 'Ctrl + Shift + T' to run test\n\npick license, e.g. via usethis::use_mit_license(), creating LICENSE and LICENSE.md-files\ncreate and update documentation via devtools::document()\nuse_readme_rmd() initializes a basic, executable README.Rmd file for the github page to describe the purpose of the package, providing installation instructions, and showing a bit of usage. build_readme() renders the file\nInstallation: devtools::check() again, then install package into library via devtools::install()\nPublish: devtools::build()converts package folder/project into single bundled file"
  },
  {
    "objectID": "posts/package_development_rstudio/index.html#structure",
    "href": "posts/package_development_rstudio/index.html#structure",
    "title": "Developing packages in RStudio",
    "section": "Structure",
    "text": "Structure\n](https://rstudio.github.io/cheatsheets/package-development.pdf)\n\nDESCRIPTION provides metadata about the package\nNAMESPACE declares the functions the package exports for external use and the external functions your package imports from other packages. is automatically edited when using roxygen2\n.Rbuildignore lists files that are needed to be around but should not be included when building the R package from source\n.Rproj.user - directory used internally by RStudio\n.gitignore anticipates Git usage and tells Git to ignore some standard, behind-the-scenes files created by R and RStudio\ntests/ directory in which the testing framework is placed, containing specific tests for the functions"
  },
  {
    "objectID": "posts/package_development_rstudio/index.html#main-functions-during-development",
    "href": "posts/package_development_rstudio/index.html#main-functions-during-development",
    "title": "Developing packages in RStudio",
    "section": "Main functions during development",
    "text": "Main functions during development\nThese functions setup parts of the package and are typically called once per package:\n\ncreate_package()\nuse_git()\nuse_mit_license()\nuse_testthat()\nuse_github()\nuse_readme_rmd()\n\nThese functions are called on a regular basis, as adding functions and tests or taking on dependencies:\n\nuse_r()\nuse_test()\nuse_package()\n\nThese functions are called multiple times per day or per hour, during development:\n\nload_all()\ndocument()\ntest()\ncheck()"
  },
  {
    "objectID": "posts/package_development_rstudio/index.html#main-shortcuts",
    "href": "posts/package_development_rstudio/index.html#main-shortcuts",
    "title": "Developing packages in RStudio",
    "section": "Main shortcuts",
    "text": "Main shortcuts\n\nCtrl + Shift + T - run devtools::test()\nCtrl + Shift + E - run devtools::check()\nCtrl + Shift + Alt + R - create roxygen2 skeleton"
  },
  {
    "objectID": "posts/package_development_rstudio/index.html#package-states",
    "href": "posts/package_development_rstudio/index.html#package-states",
    "title": "Developing packages in RStudio",
    "section": "Package states",
    "text": "Package states\n\nsource - directory of files with specific package structure\nbundled - compressed into single file using extension .tar.gz\nbinary - single platform-specific file\ninstalled - binary package that’s been compressed into a package library\nin-memory - package loaded into memory\n\n](https://r-pkgs.org/structure.html#fig-package-files)"
  },
  {
    "objectID": "posts/package_development_rstudio/index.html#more-info",
    "href": "posts/package_development_rstudio/index.html#more-info",
    "title": "Developing packages in RStudio",
    "section": "more info",
    "text": "more info\nWriting R Extensions (r-project.org)\nR packages book (2e)"
  }
]